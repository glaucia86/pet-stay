# ==============================================
# PetStay API Environment Variables
# ==============================================
# Copy this file to .env and fill in your actual values
# NEVER commit .env file with real credentials to git

# Database Configuration
# PostgreSQL connection string
# Format: postgresql://username:password@host:port/database
# Development: Uses local PostgreSQL instance
# Production: Use managed database service (e.g., AWS RDS, Neon, Supabase)
DATABASE_URL="postgresql://petstay:petstay@localhost:5433/petstay"

# Redis Configuration
# Redis connection string for caching and session management
# Format: redis://[username:password@]host:port[/database]
# Development: Uses local Redis instance
# Production: Use managed Redis service (e.g., AWS ElastiCache, Redis Cloud)
REDIS_URL="redis://localhost:6380"

# JWT Authentication
# Secret keys for JWT token generation and validation
# IMPORTANT: Use strong, unique random strings in production
# Generate with: node -e "console.log(require('crypto').randomBytes(64).toString('hex'))"
JWT_SECRET="your-super-secret-jwt-key-here"
JWT_REFRESH_SECRET="your-super-secret-refresh-key-here"

# AWS S3 Configuration (Optional - for photo uploads)
# Leave empty to skip S3 integration and use placeholder images
# Get credentials from AWS IAM Console: https://console.aws.amazon.com/iam/
# Create an S3 bucket and IAM user with S3 write permissions
# Documentation: See S3_UPLOAD_SETUP.md for detailed setup instructions
AWS_REGION="us-east-1"
AWS_ACCESS_KEY_ID="your-aws-access-key"
AWS_SECRET_ACCESS_KEY="your-aws-secret-key"
S3_BUCKET_NAME="petstay-images"

# Stripe Configuration (for billing and subscriptions)
# Get API keys from Stripe Dashboard: https://dashboard.stripe.com/apikeys
# Test mode keys start with sk_test_
# Live mode keys start with sk_live_
# Create products and prices for BASIC and PRO plans in Stripe Dashboard
STRIPE_SECRET_KEY="sk_test_..."

# Stripe Webhook Secret (for handling payment events)
# Get from Stripe Dashboard > Developers > Webhooks
# Create endpoint: https://yourdomain.com/api/v1/billing/webhook
# Select events: customer.subscription.created, customer.subscription.updated, customer.subscription.deleted
STRIPE_WEBHOOK_SECRET="whsec_..."

# Email Configuration (Optional - for notifications)
# Uses SMTP for sending emails (e.g., booking confirmations, password resets)
# Gmail users: Enable 2FA and generate an App Password
# Documentation: https://support.google.com/accounts/answer/185833
SMTP_HOST="smtp.gmail.com"
SMTP_PORT=587
SMTP_USER="your-email@gmail.com"
SMTP_PASS="your-app-password"

# Application Configuration
# Port for the API server
PORT=4000

# CORS Configuration
# Frontend application URL for CORS
# Multiple origins: "http://localhost:3000,https://yourdomain.com"
WEB_ORIGIN="http://localhost:3000"

# Environment
# Options: development, production, test
NODE_ENV="development"

# Logging
# Options: trace, debug, info, warn, error, fatal
LOG_LEVEL="info"

# Rate Limiting (requests per minute)
RATE_LIMIT_MAX=100

# Session Configuration
SESSION_DURATION_HOURS=24
REFRESH_TOKEN_DURATION_DAYS=30

# Pagination Defaults
DEFAULT_PAGE_SIZE=10
MAX_PAGE_SIZE=100

